// Code generated by sts v0.0.8. DO NOT EDIT.

package sts

func AC2DC(src source.AC) dest.DC {
	return dest.DC{
		DType: dest.CustomType(src.AType),
	}
}
func DC2AC(src dest.DC) source.AC {
	return source.AC{
		AType: source.CustomType(src.DType),
	}
}
func ACPtr2DCPtr(src *source.AC) *dest.DC {
	if src == nil {
		return nil
	}
	m := AC2DC(*src)
	return &m
}
func DCPtr2ACPtr(src *dest.DC) *source.AC {
	if src == nil {
		return nil
	}
	m := DC2AC(*src)
	return &m
}
func ACList2DCList(src []source.AC) []dest.DC {
	if src == nil {
		return nil
	}
	res := make([]dest.DC, len(src))
	for k, s := range src {
		p := AC2DC(s)
		res[k] = p
	}
	return res
}
func DCList2ACList(src []dest.DC) []source.AC {
	if src == nil {
		return nil
	}
	res := make([]source.AC, len(src))
	for k, s := range src {
		p := DC2AC(s)
		res[k] = p
	}
	return res
}
func ACList2DCPtrList(src []source.AC) []*dest.DC {
	if src == nil {
		return nil
	}
	res := make([]*dest.DC, len(src))
	for k, s := range src {
		p := AC2DC(s)
		res[k] = &p
	}
	return res
}
func DCPtrList2ACList(src []*dest.DC) []source.AC {
	if src == nil {
		return nil
	}
	res := make([]source.AC, len(src))
	for k, s := range src {
		p := DC2AC(*s)
		res[k] = p
	}
	return res
}
func ACPtrList2DCList(src []*source.AC) []dest.DC {
	if src == nil {
		return nil
	}
	res := make([]dest.DC, len(src))
	for k, s := range src {
		p := AC2DC(*s)
		res[k] = p
	}
	return res
}
func DCList2ACPtrList(src []dest.DC) []*source.AC {
	if src == nil {
		return nil
	}
	res := make([]*source.AC, len(src))
	for k, s := range src {
		p := DC2AC(s)
		res[k] = &p
	}
	return res
}
func ACPtrList2DCPtrList(src []*source.AC) []*dest.DC {
	if src == nil {
		return nil
	}
	res := make([]*dest.DC, len(src))
	for k, s := range src {
		p := AC2DC(*s)
		res[k] = &p
	}
	return res
}
func DCPtrList2ACPtrList(src []*dest.DC) []*source.AC {
	if src == nil {
		return nil
	}
	res := make([]*source.AC, len(src))
	for k, s := range src {
		p := DC2AC(*s)
		res[k] = &p
	}
	return res
}
